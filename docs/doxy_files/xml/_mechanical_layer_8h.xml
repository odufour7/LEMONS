<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_mechanical_layer_8h" kind="file" language="C++">
    <compoundname>MechanicalLayer.h</compoundname>
    <includes local="no">array</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="_agent_8h" local="yes">Agent.h</includes>
    <includes refid="_global_8h" local="yes">Global.h</includes>
    <includedby refid="_crowd_8cpp" local="yes">src/Crowd.cpp</includedby>
    <includedby refid="_mechanical_layer_8cpp" local="yes">src/MechanicalLayer.cpp</includedby>
    <incdepgraph>
      <node id="21">
        <label>../3rdparty/tinyxml/tinyxml2.h</label>
      </node>
      <node id="10">
        <label>Agent.h</label>
        <link refid="_agent_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Global.h</label>
        <link refid="_global_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/MechanicalLayer.h</label>
        <link refid="_mechanical_layer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="15">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>filesystem</label>
      </node>
      <node id="17">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>iterator</label>
      </node>
      <node id="11">
        <label>list</label>
      </node>
      <node id="3">
        <label>map</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="13">
        <label>sys/stat.h</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>unordered_set</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_mechanical_layer" prot="public">MechanicalLayer</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2025<sp/>&lt;Dufour<sp/>Oscar,<sp/>Maxime<sp/>Stappel,<sp/>Nicolas<sp/>Alexandre,<sp/>Institute<sp/>of<sp/>Light<sp/>and<sp/>Matter,<sp/>CNRS<sp/>UMR<sp/>5306&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_MECHANICAL_LAYER_INCLUDE_MECHANICALLAYER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SRC_MECHANICAL_LAYER_INCLUDE_MECHANICALLAYER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Agent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Global.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Helper<sp/>list<sp/>to<sp/>make<sp/>indices<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOXYGEN_SHOULD_SKIP_THIS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__attribute__((__packed__))<sp/>interactionsOutput_e</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>SLIP<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_ORTHO<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>FORCE_TAN<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DOXYGEN_SHOULD_SKIP_THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_mechanical_layer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_mechanical_layer_1a649d6a6badb00c69e97cd3d96d3305ad" kindref="member">MechanicalLayer</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nb_active_agents;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Number<sp/>of<sp/>mechanically<sp/>active<sp/>agens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nb_active_shapes;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Number<sp/>of<sp/>pedestrians<sp/>(each<sp/>pedestrian<sp/>is<sp/>a<sp/>collection<sp/>of<sp/>active<sp/>agents)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>vgn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Velocity<sp/>of<sp/>the<sp/>center<sp/>of<sp/>mass<sp/>(CM)<sp/>of<sp/>each<sp/>pedestrian<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>vgnp1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Velocity<sp/>of<sp/>the<sp/>CM<sp/>of<sp/>each<sp/>pedestrian<sp/>at<sp/>t+dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>rgcomp;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Initial<sp/>positions<sp/>of<sp/>all<sp/>the<sp/>components<sp/>of<sp/>the<sp/>pedestrians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>rgn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Positions<sp/>of<sp/>the<sp/>CM<sp/>of<sp/>each<sp/>pedestrian<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>rgnp1;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Positions<sp/>of<sp/>the<sp/>CM<sp/>of<sp/>each<sp/>pedestrian<sp/>at<sp/>t+dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>delta;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Difference<sp/>between<sp/>position<sp/>of<sp/>the<sp/>CM<sp/>of<sp/>each<sp/>component<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>the<sp/>CM<sp/>of<sp/>their<sp/>associated<sp/>pedestrian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>thetn;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Orientation<sp/>wrt<sp/>x-axis<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>thetnp1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Orientation<sp/>wrt<sp/>x-axis<sp/>at<sp/>t+dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>wn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Angular<sp/>velocity<sp/>at<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>wnp1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Angular<sp/>velocity<sp/>at<sp/>t+dt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>wdesired;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Desired<sp/>orientation<sp/>wrt<sp/>x-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Forces<sp/>have<sp/>the<sp/>dimension<sp/>of<sp/>an<sp/>acceleration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>Fp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Propelling<sp/>force<sp/>v_des/tau_mech</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>Forthon;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Orthogonal<sp/>force<sp/>(hertz)<sp/>wrt<sp/>contact<sp/>surface<sp/>at<sp/>time<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>Ftn;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Tangential<sp/>force<sp/>wrt<sp/>contact<sp/>surface<sp/>at<sp/>time<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>taun;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Torque<sp/>at<sp/>time<sp/>t<sp/>(moment<sp/>projected<sp/>on<sp/>z-axis)<sp/>expressed<sp/>at<sp/>the<sp/>CM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::list&lt;int&gt;&gt;<sp/>neighbours;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>active_shapeIDagent;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Pedestrian<sp/>id<sp/>of<sp/>each<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>active_shapeIDshape_crowd;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Shape<sp/>id<sp/>of<sp/>each<sp/>pedestrian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>radius;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Radius<sp/>off<sp/>all<sp/>shapes<sp/>of<sp/>actives<sp/>agents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>size_agents;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;unsigned,<sp/>unsigned&gt;<sp/>agentIds;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>agentActiveIds;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;unsigned&gt;&gt;<sp/>neighbours_shape;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned&gt;<sp/>agentIDshape;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>masses;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>mois;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double2&gt;<sp/>damping;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Tangential<sp/>relative<sp/>displacement<sp/>when<sp/>in<sp/>contact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::pair&lt;unsigned,<sp/>unsigned&gt;,<sp/>double2&gt;<sp/>slip;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::tuple&lt;unsigned,<sp/>int,<sp/>int&gt;,<sp/>double2&gt;<sp/>slip_wall;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>For<sp/>output<sp/>purposes:<sp/>the<sp/>following<sp/>variables<sp/>will<sp/>contain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>a<sp/>copy<sp/>of<sp/>slip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>fortho<sp/>from<sp/>shape<sp/>to<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>-<sp/>ft<sp/>from<sp/>shape<sp/>to<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::pair&lt;unsigned,<sp/>unsigned&gt;,<sp/>std::array&lt;double2,<sp/>3&gt;&gt;<sp/>interactionsOutput;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::tuple&lt;unsigned,<sp/>int,<sp/>int&gt;,<sp/>std::array&lt;double2,<sp/>3&gt;&gt;<sp/>interactionsOutputWall;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;double2,<sp/>double2,<sp/>double&gt;<sp/>get_interactions(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>cpt_shape,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AtTimen);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loop();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>AgentInteractions<sp/>is<sp/>an<sp/>input<sp/>and<sp/>output<sp/>file<sp/>(ie<sp/>&quot;dynamic&quot;)<sp/>of<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readInteractionsInputFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>interactionsFile);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>bool&gt;<sp/>existsContacts();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Do<sp/>contacts<sp/>exist?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>generateInteractionsOutputFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>interactionsFile,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;bool,<sp/>bool&gt;&amp;<sp/>exists);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="struct_mechanical_layer_1a649d6a6badb00c69e97cd3d96d3305ad" kindref="member">MechanicalLayer</ref>(std::list&lt;Agent*&gt;&amp;<sp/>mech_active_agents);</highlight></codeline>
<codeline lineno="92" refid="struct_mechanical_layer_1a7ff97bf10d2b101830cc7e4b38867a63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_mechanical_layer_1a7ff97bf10d2b101830cc7e4b38867a63" kindref="member">~MechanicalLayer</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SRC_MECHANICAL_LAYER_INCLUDE_MECHANICALLAYER_H_&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/MechanicalLayer.h"/>
  </compounddef>
</doxygen>
