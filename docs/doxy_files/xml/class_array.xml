<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_array" kind="class" language="C++" prot="public">
    <compoundname>Array</compoundname>
    <includes refid="array_8h" local="no">array.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_array_1aac6eea9f12b05892938a404b4b9cfd2f" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t Array::_rows</definition>
        <argsstring></argsstring>
        <name>_rows</name>
        <qualifiedname>Array::_rows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="17" column="17" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_array_1ae55959651cff3bef2e415efaec3fc40d" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t Array::_cols</definition>
        <argsstring></argsstring>
        <name>_cols</name>
        <qualifiedname>Array::_cols</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="18" column="17" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_array_1af65e5b0b5075f5e616acb06ea7633b8c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Array::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <qualifiedname>Array::_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="19" column="17" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="19" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_array_1a4b8511967d7260235fb3fe4c6ff0fd85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Array::Array</definition>
        <argsstring>(std::size_t rows, std::size_t cols, double val=0.0)</argsstring>
        <name>Array</name>
        <qualifiedname>Array::Array</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="22" column="5" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a1642eaeb5eb1b9cc92482f42cb3a86e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array::Array</definition>
        <argsstring>(const Array &amp;src)=default</argsstring>
        <name>Array</name>
        <qualifiedname>Array::Array</qualifiedname>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1abb83bfc0a7b3c54f3ee953dc42858466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
        <definition>Array &amp; Array::operator=</definition>
        <argsstring>(const Array &amp;src)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>Array::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="35" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a843ed6e3566840274718632ca0e24a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Array::~Array</definition>
        <argsstring>()=default</argsstring>
        <name>~Array</name>
        <qualifiedname>Array::~Array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="38" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a2366fefbd2b22a7939874fefa0a6eee1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Array::ncols</definition>
        <argsstring>() const</argsstring>
        <name>ncols</name>
        <qualifiedname>Array::ncols</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the number of columns </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="46" column="24" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a427728b2a4c175d63f6953dc16423c01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Array::nrows</definition>
        <argsstring>() const</argsstring>
        <name>nrows</name>
        <qualifiedname>Array::nrows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the number of rows </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="51" column="24" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a073f3a7a0d127a16fbbbdee02790acd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t Array::nelements</definition>
        <argsstring>() const</argsstring>
        <name>nelements</name>
        <qualifiedname>Array::nelements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the total number of elements in the array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="56" column="24" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a4a171836a2d74af49d6e54a7b9bf8550" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; Array::operator()</definition>
        <argsstring>(int row, int col)</argsstring>
        <name>operator()</name>
        <qualifiedname>Array::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="58" column="19" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1ac60eac74b34814eedaa541540916487d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double &amp; Array::operator()</definition>
        <argsstring>(int row, int col) const</argsstring>
        <name>operator()</name>
        <qualifiedname>Array::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="64" column="25" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1aa4a9c943ef0704302d74b6cf38809060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt; &amp;</type>
        <definition>std::vector&lt; double &gt; &amp; Array::flat</definition>
        <argsstring>()</argsstring>
        <name>flat</name>
        <qualifiedname>Array::flat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return a flattened view of the data region <ndash/> this can be used with a range-for loop, e.g. <computeroutput>for (auto &amp;e : a.flat()) {...}</computeroutput> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="74" column="24" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1ae1e194ae997e4de3d44a7dc107233cbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; Array::flat</definition>
        <argsstring>(int element)</argsstring>
        <name>flat</name>
        <qualifiedname>Array::flat</qualifiedname>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set an array element in the flattened index space </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="79" column="19" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a97c16a03a723f8585c0746a19c5128fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double &amp; Array::flat</definition>
        <argsstring>(int element) const</argsstring>
        <name>flat</name>
        <qualifiedname>Array::flat</qualifiedname>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get an array element in the flattened index space for a const array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="88" column="25" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1a28763ba0195128b1cb2f9b50eef3cc2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Array::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <qualifiedname>Array::min</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the global minimum of the array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="96" column="12" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_array_1af1e14083e5d6daa2c9865761f4970616" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Array::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <qualifiedname>Array::max</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the global maximum of the array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="107" column="12" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="107" bodyend="113"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_array_1a724f05f812068c1bc26b3904bc7d5022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Array &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>Array::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="class_array" kindref="compound">Array</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="115" column="12" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="120" bodyend="129"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>a contiguous 2-d array here the data is stored in row-major order in a 1-d memory space managed as a vector. We overload () to allow us to index this as a(irow, icol) </para>
    </detaileddescription>
    <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" line="15" column="1" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/code/src/mechanical_layer/array.h" bodystart="15" bodyend="116"/>
    <listofallmembers>
      <member refid="class_array_1ae55959651cff3bef2e415efaec3fc40d" prot="private" virt="non-virtual"><scope>Array</scope><name>_cols</name></member>
      <member refid="class_array_1af65e5b0b5075f5e616acb06ea7633b8c" prot="private" virt="non-virtual"><scope>Array</scope><name>_data</name></member>
      <member refid="class_array_1aac6eea9f12b05892938a404b4b9cfd2f" prot="private" virt="non-virtual"><scope>Array</scope><name>_rows</name></member>
      <member refid="class_array_1a4b8511967d7260235fb3fe4c6ff0fd85" prot="public" virt="non-virtual"><scope>Array</scope><name>Array</name></member>
      <member refid="class_array_1a1642eaeb5eb1b9cc92482f42cb3a86e0" prot="public" virt="non-virtual"><scope>Array</scope><name>Array</name></member>
      <member refid="class_array_1aa4a9c943ef0704302d74b6cf38809060" prot="public" virt="non-virtual"><scope>Array</scope><name>flat</name></member>
      <member refid="class_array_1ae1e194ae997e4de3d44a7dc107233cbd" prot="public" virt="non-virtual"><scope>Array</scope><name>flat</name></member>
      <member refid="class_array_1a97c16a03a723f8585c0746a19c5128fb" prot="public" virt="non-virtual"><scope>Array</scope><name>flat</name></member>
      <member refid="class_array_1af1e14083e5d6daa2c9865761f4970616" prot="public" virt="non-virtual"><scope>Array</scope><name>max</name></member>
      <member refid="class_array_1a28763ba0195128b1cb2f9b50eef3cc2b" prot="public" virt="non-virtual"><scope>Array</scope><name>min</name></member>
      <member refid="class_array_1a2366fefbd2b22a7939874fefa0a6eee1" prot="public" virt="non-virtual"><scope>Array</scope><name>ncols</name></member>
      <member refid="class_array_1a073f3a7a0d127a16fbbbdee02790acd8" prot="public" virt="non-virtual"><scope>Array</scope><name>nelements</name></member>
      <member refid="class_array_1a427728b2a4c175d63f6953dc16423c01" prot="public" virt="non-virtual"><scope>Array</scope><name>nrows</name></member>
      <member refid="class_array_1a4a171836a2d74af49d6e54a7b9bf8550" prot="public" virt="non-virtual"><scope>Array</scope><name>operator()</name></member>
      <member refid="class_array_1ac60eac74b34814eedaa541540916487d" prot="public" virt="non-virtual"><scope>Array</scope><name>operator()</name></member>
      <member refid="class_array_1a724f05f812068c1bc26b3904bc7d5022" prot="public" virt="non-virtual"><scope>Array</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_array_1abb83bfc0a7b3c54f3ee953dc42858466" prot="public" virt="non-virtual"><scope>Array</scope><name>operator=</name></member>
      <member refid="class_array_1a843ed6e3566840274718632ca0e24a2b" prot="public" virt="non-virtual"><scope>Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
