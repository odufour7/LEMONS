<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_global_8h" kind="file" language="C++">
    <compoundname>Global.h</compoundname>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">filesystem</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iterator</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="yes">../3rdparty/tinyxml/tinyxml2.h</includes>
    <includedby refid="_agent_8h" local="yes">include/Agent.h</includedby>
    <includedby refid="_crowd_8h" local="yes">include/Crowd.h</includedby>
    <includedby refid="_crowd_mechanics_8h" local="yes">include/CrowdMechanics.h</includedby>
    <includedby refid="_input_static_8h" local="yes">include/InputStatic.h</includedby>
    <includedby refid="_mechanical_layer_8h" local="yes">include/MechanicalLayer.h</includedby>
    <includedby refid="_global_8cpp" local="yes">src/Global.cpp</includedby>
    <incdepgraph>
      <node id="15">
        <label>../3rdparty/tinyxml/tinyxml2.h</label>
      </node>
      <node id="1">
        <label>include/Global.h</label>
        <link refid="_global_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>filesystem</label>
      </node>
      <node id="6">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>list</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="2">
        <label>sys/stat.h</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/Agent.h</label>
        <link refid="_agent_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/Crowd.h</label>
        <link refid="_crowd_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/CrowdMechanics.h</label>
        <link refid="_crowd_mechanics_8h_source"/>
      </node>
      <node id="1">
        <label>include/Global.h</label>
        <link refid="_global_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>include/InputStatic.h</label>
        <link refid="_input_static_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/MechanicalLayer.h</label>
        <link refid="_mechanical_layer_8h_source"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_global_8h_1a4efe52b7a9d34b6729f25c99620a5511" prot="public" static="no">
        <type>std::pair&lt; int, int &gt;</type>
        <definition>typedef std::pair&lt;int, int&gt; int2</definition>
        <argsstring></argsstring>
        <name>int2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="52" column="19" bodyfile="include/Global.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_global_8h_1a27ec70e4bef012c5adbe0c8cf122676b" prot="public" static="no">
        <type>std::pair&lt; double, double &gt;</type>
        <definition>typedef std::pair&lt;double, double&gt; double2</definition>
        <argsstring></argsstring>
        <name>double2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="53" column="19" bodyfile="include/Global.h" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_global_8h_1a714f1ca4d0b766c27006639b8cad4b70" prot="public" static="no" extern="yes" mutable="no">
        <type>bool</type>
        <definition>bool firstRun</definition>
        <argsstring></argsstring>
        <name>firstRun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="69" column="13" bodyfile="src/Global.cpp" bodystart="65" bodyend="-1" declfile="include/Global.h" declline="69" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a245f542572171827c24b7d2fc8c0228b" prot="public" static="no" extern="yes" mutable="no">
        <type>std::vector&lt; std::vector&lt; double2 &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double2&gt; &gt; listObstacles</definition>
        <argsstring></argsstring>
        <name>listObstacles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="72" column="20" bodyfile="src/Global.cpp" bodystart="75" bodyend="-1" declfile="include/Global.h" declline="72" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1ad538aa77abb694f8faf437a41e3e8037" prot="public" static="no" extern="yes" mutable="no">
        <type>double</type>
        <definition>double Lx</definition>
        <argsstring></argsstring>
        <name>Lx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="73" column="15" bodyfile="src/Global.cpp" bodystart="73" bodyend="-1" declfile="include/Global.h" declline="73" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a9b3d111ccf7f82fb80aeb6f8b229c21b" prot="public" static="no" extern="yes" mutable="no">
        <type>double</type>
        <definition>double Ly</definition>
        <argsstring></argsstring>
        <name>Ly</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="74" column="15" bodyfile="src/Global.cpp" bodystart="74" bodyend="-1" declfile="include/Global.h" declline="74" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a17fb23d2539d94d39f4894074c1d5b45" prot="public" static="no" extern="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t nAgents</definition>
        <argsstring></argsstring>
        <name>nAgents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="76" column="17" bodyfile="src/Global.cpp" bodystart="67" bodyend="-1" declfile="include/Global.h" declline="76" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a44e082dbf949303a43b6fa4a5e5c3cca" prot="public" static="no" extern="yes" mutable="no">
        <type>std::map&lt; std::string, uint32_t &gt;</type>
        <definition>std::map&lt;std::string, uint32_t&gt; agentMap</definition>
        <argsstring></argsstring>
        <name>agentMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="77" column="17" bodyfile="src/Global.cpp" bodystart="68" bodyend="-1" declfile="include/Global.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a92e99256a0e993d98492591f470fcf70" prot="public" static="no" extern="yes" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; agentMapInverse</definition>
        <argsstring></argsstring>
        <name>agentMapInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="78" column="20" bodyfile="src/Global.cpp" bodystart="69" bodyend="-1" declfile="include/Global.h" declline="78" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1acd1960d2e52407aba08102dc55c5891e" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="struct_agent" kindref="compound">Agent</ref> **</type>
        <definition>Agent** agents</definition>
        <argsstring></argsstring>
        <name>agents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="80" column="14" bodyfile="src/Global.cpp" bodystart="70" bodyend="-1" declfile="include/Global.h" declline="80" declcolumn="14"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a03e28be41881b703c836edbfe9b51b17" prot="public" static="no" extern="yes" mutable="no">
        <type>double</type>
        <definition>double dt</definition>
        <argsstring></argsstring>
        <name>dt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="83" column="15" bodyfile="src/Global.cpp" bodystart="78" bodyend="-1" declfile="include/Global.h" declline="83" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a8bfe393342f0c199097b8a314cdc6dab" prot="public" static="no" extern="yes" mutable="no">
        <type>double</type>
        <definition>double dt_mech</definition>
        <argsstring></argsstring>
        <name>dt_mech</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="84" column="15" bodyfile="src/Global.cpp" bodystart="79" bodyend="-1" declfile="include/Global.h" declline="84" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a3277222a08d2a1a9bef000016a5bc383" prot="public" static="no" extern="yes" mutable="no">
        <type>std::vector&lt; double2 &gt;</type>
        <definition>std::vector&lt;double2&gt; agentProperties</definition>
        <argsstring></argsstring>
        <name>agentProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="87" column="20" bodyfile="src/Global.cpp" bodystart="83" bodyend="-1" declfile="include/Global.h" declline="87" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a8c0a8fe32456ebb50a4d4033e37ff4e5" prot="public" static="no" extern="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t nMaterials</definition>
        <argsstring></argsstring>
        <name>nMaterials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="88" column="17" bodyfile="src/Global.cpp" bodystart="84" bodyend="-1" declfile="include/Global.h" declline="88" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a449a06862d241ed51aafc2d9f103bd33" prot="public" static="no" extern="yes" mutable="no">
        <type>double **</type>
        <definition>double** intrinsicProperties</definition>
        <argsstring></argsstring>
        <name>intrinsicProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="89" column="15" bodyfile="src/Global.cpp" bodystart="85" bodyend="-1" declfile="include/Global.h" declline="89" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a725385e907dca1efd746427a21d02b18" prot="public" static="no" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int nIntrinsicProperties</definition>
        <argsstring></argsstring>
        <name>nIntrinsicProperties</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="90" column="15" bodyfile="include/Global.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a6ef6c78109b8fcb63fe1cbbc85b1365f" prot="public" static="no" extern="yes" mutable="no">
        <type>double ***</type>
        <definition>double*** binaryProperties</definition>
        <argsstring></argsstring>
        <name>binaryProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="98" column="15" bodyfile="src/Global.cpp" bodystart="86" bodyend="-1" declfile="include/Global.h" declline="98" declcolumn="15"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1acb0ea5b3e97d546ec59597d1e38f6da8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>int</type>
        <definition>int nBinaryProperties</definition>
        <argsstring></argsstring>
        <name>nBinaryProperties</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="99" column="15" bodyfile="include/Global.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1ad17e406d411b13e36cdc42b3a781d1a0" prot="public" static="no" extern="yes" mutable="no">
        <type>std::vector&lt; int32_t &gt;</type>
        <definition>std::vector&lt;int32_t&gt; obstaclesMaterial</definition>
        <argsstring></argsstring>
        <name>obstaclesMaterial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="110" column="20" bodyfile="src/Global.cpp" bodystart="87" bodyend="-1" declfile="include/Global.h" declline="110" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a8cf6fd8677b31374a3f7b977386d679e" prot="public" static="no" extern="yes" mutable="no">
        <type>std::map&lt; uint32_t, int32_t &gt;</type>
        <definition>std::map&lt;uint32_t, int32_t&gt; shapesMaterial</definition>
        <argsstring></argsstring>
        <name>shapesMaterial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="111" column="17" bodyfile="src/Global.cpp" bodystart="88" bodyend="-1" declfile="include/Global.h" declline="111" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a1dafd4caf95ef720e13da7d763236f91" prot="public" static="no" extern="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string pathStatic</definition>
        <argsstring></argsstring>
        <name>pathStatic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="114" column="20" bodyfile="src/Global.cpp" bodystart="91" bodyend="-1" declfile="include/Global.h" declline="114" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1af643e0a93a86f1561a94baec6fa0b14e" prot="public" static="no" extern="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string pathDynamic</definition>
        <argsstring></argsstring>
        <name>pathDynamic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="115" column="20" bodyfile="src/Global.cpp" bodystart="92" bodyend="-1" declfile="include/Global.h" declline="115" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8h_1a72db0ee84370892f3c8df7fadf2bfb80" prot="public" static="no" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double vMaxAgent</definition>
        <argsstring></argsstring>
        <name>vMaxAgent</name>
        <initializer>= 7.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="121" column="18" bodyfile="include/Global.h" bodystart="121" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_global_8h_1abe8198bc51fc4dba2f59ff2196bc31b5" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator+</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="55" column="16" bodyfile="src/Global.cpp" bodystart="42" bodyend="42" declfile="include/Global.h" declline="55" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a1862d4516e73ee3b3c2db581c9d7dfc4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator-</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="56" column="16" bodyfile="src/Global.cpp" bodystart="43" bodyend="43" declfile="include/Global.h" declline="56" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a76c71fed42cb84e0a09d13a88ada6f3a" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator*</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="57" column="16" bodyfile="src/Global.cpp" bodystart="45" bodyend="45" declfile="include/Global.h" declline="57" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a11c67c1b3c0e2076dc90d5d2e03ce6fc" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator*</definition>
        <argsstring>(double const coef, double2 const &amp;R)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const</type>
          <declname>coef</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="58" column="16" bodyfile="src/Global.cpp" bodystart="47" bodyend="47" declfile="include/Global.h" declline="58" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a766e6388d239b51baa276fa31cbfd2c7" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double operator%</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="59" column="15" bodyfile="src/Global.cpp" bodystart="49" bodyend="49" declfile="include/Global.h" declline="59" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1af5778cd68c3fb8dbdf4d84f64d739a18" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double operator!</definition>
        <argsstring>(double2 const &amp;a)</argsstring>
        <name>operator!</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="60" column="15" bodyfile="src/Global.cpp" bodystart="51" bodyend="51" declfile="include/Global.h" declline="60" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a3120e906e54cde6d1aac48c62ba184f8" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator^</definition>
        <argsstring>(double const a, double2 const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>double const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="61" column="16" bodyfile="src/Global.cpp" bodystart="53" bodyend="53" declfile="include/Global.h" declline="61" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a849746700f4ccaba4679566d70ec9900" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator+</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="63" column="13" bodyfile="src/Global.cpp" bodystart="57" bodyend="57" declfile="include/Global.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a6dbb29b39df9d069b3e8c49df3aca876" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator-</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="64" column="13" bodyfile="src/Global.cpp" bodystart="58" bodyend="58" declfile="include/Global.h" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a9e9a0359c6c7cc6b03652e3d0e616704" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator*</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="65" column="13" bodyfile="src/Global.cpp" bodystart="60" bodyend="60" declfile="include/Global.h" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a53c7d5b40d13d038e6fc8dc60ed8ed4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; int, double2 &gt;</type>
        <definition>std::pair&lt; int, double2 &gt; parse2DComponents</definition>
        <argsstring>(const char *line)</argsstring>
        <name>parse2DComponents</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Parses a string containing a pair of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of doubles containing the parsed values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="127" column="11" bodyfile="src/Global.cpp" bodystart="104" bodyend="127" declfile="include/Global.h" declline="127" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1ad9e358fcdbe24dd1c5b1196644116607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double get_interval</definition>
        <argsstring>(const double x, const double length)</argsstring>
        <name>get_interval</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Calculates the interval of a given value within a specified length. </para>
        </briefdescription>
        <detaileddescription>
<para>The interval is calculated by adding half of the length to the value, taking the modulo of the sum with the length, and subtracting half of the length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for which the interval is calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the interval.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interval of the value within the specified length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="130" column="15" bodyfile="src/Global.cpp" bodystart="168" bodyend="168" declfile="include/Global.h" declline="130" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a55be1ace8f20b737960163ee8932a816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; double, double2 &gt;</type>
        <definition>std::pair&lt; double, double2 &gt; get_distance_to_wall_and_closest_point</definition>
        <argsstring>(double2 vertexA, double2 vertexB, const double2 &amp;C)</argsstring>
        <name>get_distance_to_wall_and_closest_point</name>
        <param>
          <type>double2</type>
          <declname>vertexA</declname>
        </param>
        <param>
          <type>double2</type>
          <declname>vertexB</declname>
        </param>
        <param>
          <type>const double2 &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Calculates the distance to a wall and the closest point on the wall from a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertexA</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vertex of the wall segment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertexB</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vertex of the wall segment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The point for which the distance and closest point are calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair containing the distance to the wall and the closest point on the wall. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="131" column="11" bodyfile="src/Global.cpp" bodystart="138" bodyend="155" declfile="include/Global.h" declline="131" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_global_8h_1a2fb8f9398334dcfcab2e1f03b01877d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_distance</definition>
        <argsstring>(const double2 &amp;A, const double2 &amp;B)</argsstring>
        <name>get_distance</name>
        <param>
          <type>const double2 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const double2 &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the Euclidean distance between two points in a 2D space lattice.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates of the first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates of the second point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euclidean distance between the two points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/Global.h" line="132" column="8" bodyfile="src/Global.cpp" bodystart="177" bodyend="182" declfile="include/Global.h" declline="132" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/><sp/>2025<sp/><sp/>Institute<sp/>of<sp/>Light<sp/>and<sp/>Matter,<sp/>CNRS<sp/>UMR<sp/>5306</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>Contributors:<sp/>Oscar<sp/>DUFOUR,<sp/>Maxime<sp/>STAPELLE,<sp/>Alexandre<sp/>NICOLAS</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>software<sp/>is<sp/>a<sp/>computer<sp/>program<sp/>designed<sp/>to<sp/>generate<sp/>a<sp/>realistic<sp/>crowd<sp/>from<sp/>anthropometric<sp/>data<sp/>and</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>simulate<sp/>the<sp/>mechanical<sp/>interactions<sp/>that<sp/>occur<sp/>within<sp/>it<sp/>and<sp/>with<sp/>obstacles.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL<sp/><sp/>license<sp/>under<sp/>French<sp/>law<sp/>and<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL<sp/>&quot;http://www.cecill.info&quot;.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited<sp/>liability.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL<sp/>license<sp/>and<sp/>that</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_MECHANICAL_LAYER_INCLUDE_GLOBAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SRC_MECHANICAL_LAYER_INCLUDE_GLOBAL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3rd<sp/>party</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../3rdparty/tinyxml/tinyxml2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>New<sp/>types</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;int,<sp/>int&gt;<sp/>int2;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;double,<sp/>double&gt;<sp/>double2;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Define<sp/>operations<sp/>on<sp/>type<sp/>double2<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>double2<sp/>operator+(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>double2<sp/>operator-(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>double2<sp/>operator*(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>double2<sp/>operator*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>coef,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>R);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator%(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator!(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>double2<sp/>operator^(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Define<sp/>operations<sp/>on<sp/>type<sp/>int2<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int2<sp/>operator+(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int2<sp/>operator-(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int2<sp/>operator*(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>Global<sp/>variables</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>firstRun;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;double2&gt;&gt;<sp/>listObstacles;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lx;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ly;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>nAgents;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Number<sp/>of<sp/>agents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>uint32_t&gt;<sp/>agentMap;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Correspondence<sp/>between<sp/>user-given<sp/>ids<sp/>and<sp/>internal<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>agentMapInverse;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Inverse<sp/>version<sp/>for<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_agent" kindref="compound">Agent</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Defined<sp/>in<sp/>Agents.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="struct_agent" kindref="compound">Agent</ref>**<sp/>agents;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>The<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>agent<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Time<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Time<sp/>between<sp/>two<sp/>calls<sp/>of<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_mech;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Time<sp/>step<sp/>of<sp/>the<sp/>mechanical<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Mechanical<sp/>layer<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::vector&lt;double2&gt;<sp/>agentProperties;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1<sp/>/<sp/>tau_mech:<sp/>translational<sp/>and<sp/>rotational<sp/>damping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/>nMaterials;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>intrinsicProperties;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nIntrinsicProperties<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOXYGEN_SHOULD_SKIP_THIS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__attribute__((__packed__))</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>YOUNG_MODULUS<sp/>=<sp/>0,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>SHEAR_MODULUS<sp/>=<sp/>1,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>G</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DOXYGEN_SHOULD_SKIP_THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>binaryProperties;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBinaryProperties<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(DOXYGEN_SHOULD_SKIP_THIS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__attribute__((__packed__))</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>DAMPING_NORMAL<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Gamma_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>DAMPING_TANGENTIAL<sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Gamma_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>STIFFNESS_NORMAL<sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>k_n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>STIFFNESS_TANGENTIAL<sp/>=<sp/>3,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>k_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>FRICTION_SLIDING<sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>mu_dyn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DOXYGEN_SHOULD_SKIP_THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::vector&lt;int32_t&gt;<sp/>obstaclesMaterial;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::map&lt;uint32_t,<sp/>int32_t&gt;<sp/>shapesMaterial;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/>pathStatic;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/>pathDynamic;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>Model<sp/>parameters<sp/>and<sp/>user-defined<sp/>constants</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Maximum<sp/>speed<sp/>of<sp/>an<sp/>agent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vMaxAgent<sp/>=<sp/>7.;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/>Function<sp/>declarations</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">std::pair&lt;int,<sp/>double2&gt;<sp/>parse2DComponents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Physics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_interval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">std::pair&lt;double,<sp/>double2&gt;<sp/>get_distance_to_wall_and_closest_point(double2<sp/>vertexA,<sp/>double2<sp/>vertexB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>C);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>B);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SRC_MECHANICAL_LAYER_INCLUDE_GLOBAL_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/Global.h"/>
  </compounddef>
</doxygen>
