<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_global_8cpp" kind="file" language="C++">
    <compoundname>Global.cpp</compoundname>
    <includes refid="_global_8h" local="yes">Global.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="2">
        <label>Global.h</label>
        <link refid="_global_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp</label>
        <link refid="_global_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>list</label>
      </node>
      <node id="6">
        <label>map</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_global_8cpp_1a5dd948293e826dd88f965e2c71722af2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool loadStaticData</definition>
        <argsstring></argsstring>
        <name>loadStaticData</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="67" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a17fb23d2539d94d39f4894074c1d5b45" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t nAgents</definition>
        <argsstring></argsstring>
        <name>nAgents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="71" column="10" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a2d9c16ea9a48a801f040edbb1364a369" prot="public" static="no" mutable="no">
        <type>map&lt; string, uint32_t &gt;</type>
        <definition>map&lt;string, uint32_t&gt; agentMap</definition>
        <argsstring></argsstring>
        <name>agentMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="72" column="5" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a9383e068c56024265f6b9fe837d586f6" prot="public" static="no" mutable="no">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt;string&gt; agentMapInverse</definition>
        <argsstring></argsstring>
        <name>agentMapInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="73" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1acd1960d2e52407aba08102dc55c5891e" prot="public" static="no" mutable="no">
        <type><ref refid="struct_agent" kindref="compound">Agent</ref> **</type>
        <definition>Agent** agents</definition>
        <argsstring></argsstring>
        <name>agents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="74" column="7" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1ad538aa77abb694f8faf437a41e3e8037" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Lx</definition>
        <argsstring></argsstring>
        <name>Lx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="77" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a9b3d111ccf7f82fb80aeb6f8b229c21b" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double Ly</definition>
        <argsstring></argsstring>
        <name>Ly</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="78" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a7748aa3ec6479e25397cee7d2eb63b88" prot="public" static="no" mutable="no">
        <type>vector&lt; vector&lt; double2 &gt; &gt;</type>
        <definition>vector&lt;vector&lt;double2&gt; &gt; listObstacles</definition>
        <argsstring></argsstring>
        <name>listObstacles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="79" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a03e28be41881b703c836edbfe9b51b17" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dt</definition>
        <argsstring></argsstring>
        <name>dt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="82" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a8bfe393342f0c199097b8a314cdc6dab" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dt_mech</definition>
        <argsstring></argsstring>
        <name>dt_mech</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="83" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1ada1128f7eea9df0860984ef5c5d8ec2d" prot="public" static="no" mutable="no">
        <type>vector&lt; double2 &gt;</type>
        <definition>vector&lt;double2&gt; agentProperties</definition>
        <argsstring></argsstring>
        <name>agentProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="87" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a8c0a8fe32456ebb50a4d4033e37ff4e5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t nMaterials</definition>
        <argsstring></argsstring>
        <name>nMaterials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="88" column="10" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a449a06862d241ed51aafc2d9f103bd33" prot="public" static="no" mutable="no">
        <type>double **</type>
        <definition>double** intrinsicProperties</definition>
        <argsstring></argsstring>
        <name>intrinsicProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="89" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a6ef6c78109b8fcb63fe1cbbc85b1365f" prot="public" static="no" mutable="no">
        <type>double ***</type>
        <definition>double*** binaryProperties</definition>
        <argsstring></argsstring>
        <name>binaryProperties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="90" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a8eda14234da32f1a6cc9f83e29039058" prot="public" static="no" mutable="no">
        <type>vector&lt; int32_t &gt;</type>
        <definition>vector&lt;int32_t&gt; obstaclesMaterial</definition>
        <argsstring></argsstring>
        <name>obstaclesMaterial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="91" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a55e531751036fba011fc2ed2a099e007" prot="public" static="no" mutable="no">
        <type>map&lt; uint32_t, int32_t &gt;</type>
        <definition>map&lt;uint32_t, int32_t&gt; shapesMaterial</definition>
        <argsstring></argsstring>
        <name>shapesMaterial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="92" column="5" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a9dd72cf4b283d7ddc950555b117389e9" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string pathStatic</definition>
        <argsstring></argsstring>
        <name>pathStatic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="95" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_global_8cpp_1a105202debb0122c2c030880a0cf66b90" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string pathDynamic</definition>
        <argsstring></argsstring>
        <name>pathDynamic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="96" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_global_8cpp_1abe8198bc51fc4dba2f59ff2196bc31b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator+</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="44" column="9" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a1862d4516e73ee3b3c2db581c9d7dfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator-</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="45" column="9" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a76c71fed42cb84e0a09d13a88ada6f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator*</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="47" column="9" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a11c67c1b3c0e2076dc90d5d2e03ce6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator*</definition>
        <argsstring>(double const coef, double2 const &amp;R)</argsstring>
        <name>operator*</name>
        <param>
          <type>double const</type>
          <declname>coef</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="49" column="9" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a766e6388d239b51baa276fa31cbfd2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double operator%</definition>
        <argsstring>(double2 const &amp;a, double2 const &amp;b)</argsstring>
        <name>operator%</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="51" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1af5778cd68c3fb8dbdf4d84f64d739a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double operator!</definition>
        <argsstring>(double2 const &amp;a)</argsstring>
        <name>operator!</name>
        <param>
          <type>double2 const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="53" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a3120e906e54cde6d1aac48c62ba184f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double2</type>
        <definition>double2 operator^</definition>
        <argsstring>(double const a, double2 const &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>double const</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="55" column="9" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a849746700f4ccaba4679566d70ec9900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator+</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="59" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a6dbb29b39df9d069b3e8c49df3aca876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator-</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="60" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a9e9a0359c6c7cc6b03652e3d0e616704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int2</type>
        <definition>int2 operator*</definition>
        <argsstring>(int2 const &amp;a, int2 const &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>int2 const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int2 const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="62" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a1c2e91f7870a074bdb7adb08acc449e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; int, double2 &gt;</type>
        <definition>pair&lt; int, double2 &gt; parse2DComponents</definition>
        <argsstring>(const char *line)</argsstring>
        <name>parse2DComponents</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Parses a string containing a pair of doubles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to be parsed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of doubles containing the parsed values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="108" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="108" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a09193e58d7734175ed54421ddf1e38fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; double, double2 &gt;</type>
        <definition>pair&lt; double, double2 &gt; get_distance_to_wall_and_closest_point</definition>
        <argsstring>(double2 vertexA, double2 vertexB, const double2 &amp;C)</argsstring>
        <name>get_distance_to_wall_and_closest_point</name>
        <param>
          <type>double2</type>
          <declname>vertexA</declname>
        </param>
        <param>
          <type>double2</type>
          <declname>vertexB</declname>
        </param>
        <param>
          <type>const double2 &amp;</type>
          <declname>C</declname>
        </param>
        <briefdescription>
<para>Calculates the distance to a wall and the closest point on the wall from a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertexA</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vertex of the wall segment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertexB</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vertex of the wall segment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>The point for which the distance and closest point are calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pair containing the distance to the wall and the closest point on the wall. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="142" column="6" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="142" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1ad9e358fcdbe24dd1c5b1196644116607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double get_interval</definition>
        <argsstring>(const double x, const double length)</argsstring>
        <name>get_interval</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Calculates the interval of a given value within a specified length. </para>
        </briefdescription>
        <detaileddescription>
<para>The interval is calculated by adding half of the length to the value, taking the modulo of the sum with the length, and subtracting half of the length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The value for which the interval is calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the interval.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The interval of the value within the specified length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="172" column="15" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="_global_8cpp_1a2fb8f9398334dcfcab2e1f03b01877d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_distance</definition>
        <argsstring>(const double2 &amp;A, const double2 &amp;B)</argsstring>
        <name>get_distance</name>
        <param>
          <type>const double2 &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const double2 &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the Euclidean distance between two points in a 2D space lattice.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates of the first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>The coordinates of the second point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euclidean distance between the two points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" line="181" column="8" bodyfile="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp" bodystart="181" bodyend="186"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/><sp/>2025<sp/><sp/>Institute<sp/>of<sp/>Light<sp/>and<sp/>Matter,<sp/>CNRS<sp/>UMR<sp/>5306,<sp/>University<sp/>Claude<sp/>Bernard<sp/>Lyon<sp/>1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>Contributors:<sp/>Oscar<sp/>DUFOUR,<sp/>Maxime<sp/>STAPELLE,<sp/>Alexandre<sp/>NICOLAS</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>software<sp/>is<sp/>a<sp/>computer<sp/>program<sp/>designed<sp/>to<sp/>generate<sp/>a<sp/>realistic<sp/>crowd<sp/>from<sp/>anthropometric<sp/>data<sp/>and</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>simulate<sp/>the<sp/>mechanical<sp/>interactions<sp/>that<sp/>occur<sp/>within<sp/>it<sp/>and<sp/>with<sp/>obstacles.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL<sp/><sp/>license<sp/>under<sp/>French<sp/>law<sp/>and<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL<sp/>&quot;http://www.cecill.info&quot;.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited<sp/>liability.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL<sp/>license<sp/>and<sp/>that</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>Global<sp/>variables,<sp/>operators<sp/>and<sp/>function<sp/>used<sp/>by<sp/>the<sp/>whole<sp/>library.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Global.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::map,<sp/>std::string,<sp/>std::vector,<sp/>std::pair,<sp/>std::stringstream;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>Operations<sp/>on<sp/>new<sp/>types:<sp/>definitions</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Define<sp/>operations<sp/>on<sp/>type<sp/>double2<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Addition<sp/>of<sp/>two<sp/>double2<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">double2<sp/>operator+(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>+<sp/>b.first,<sp/>a.second<sp/>+<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">double2<sp/>operator-(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>-<sp/>b.first,<sp/>a.second<sp/>-<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Element-wise<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">double2<sp/>operator*(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>*<sp/>b.first,<sp/>a.second<sp/>*<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Scalar<sp/>multiplication<sp/>with<sp/>a<sp/>double2<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">double2<sp/>operator*(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>coef,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>R)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{coef<sp/>*<sp/>R.first,<sp/>coef<sp/>*<sp/>R.second};<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Dot<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator%(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.first<sp/>*<sp/>b.first<sp/>+<sp/>a.second<sp/>*<sp/>b.second;<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Norm<sp/>(magnitude)<sp/>of<sp/>a<sp/>double2<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator!(double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a<sp/>%<sp/>a);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cross<sp/>product-like<sp/>operation<sp/>for<sp/>2D<sp/>vectors<sp/>(returns<sp/>perpendicular<sp/>vector<sp/>scaled<sp/>by<sp/>scalar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">double2<sp/>operator^(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a,<sp/>double2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{-a<sp/>*<sp/>b.second,<sp/>a<sp/>*<sp/>b.first};<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Define<sp/>operations<sp/>on<sp/>type<sp/>int2<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Addition<sp/>of<sp/>two<sp/>int2<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">int2<sp/>operator+(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>+<sp/>b.first,<sp/>a.second<sp/>+<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">int2<sp/>operator-(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>-<sp/>b.first,<sp/>a.second<sp/>-<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Element-wise<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">int2<sp/>operator*(int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a,<sp/>int2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{a.first<sp/>*<sp/>b.first,<sp/>a.second<sp/>*<sp/>b.second};<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>Global<sp/>variables</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>loadStaticData<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>In<sp/>case<sp/>of<sp/>several<sp/>calls<sp/>to<sp/>the<sp/>library,<sp/>this<sp/>flag<sp/>says<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>static<sp/>data<sp/>needs<sp/>to<sp/>be<sp/>reloaded<sp/>(eg<sp/>when<sp/>a<sp/>user<sp/>is<sp/>using<sp/>the<sp/>GUI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>application<sp/>and<sp/>changes<sp/>the<sp/>geometry<sp/>and/or<sp/>agents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">uint32_t<sp/>nAgents;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">map&lt;string,<sp/>uint32_t&gt;<sp/>agentMap;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Correspondence<sp/>between<sp/>user-given<sp/>ids<sp/>and<sp/>internal<sp/>ids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">vector&lt;string&gt;<sp/>agentMapInverse;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Inverse<sp/>version<sp/>for<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="struct_agent" kindref="compound">Agent</ref>**<sp/>agents;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>The<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>the<sp/>agent<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Lx;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ly;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">vector&lt;vector&lt;double2&gt;&gt;<sp/>listObstacles;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Basic<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Time<sp/>step<sp/>of<sp/>the<sp/>main<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt_mech;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Time<sp/>step<sp/>of<sp/>the<sp/>mechanical<sp/>layer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Mechanical<sp/>layer<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Materials</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">vector&lt;double2&gt;<sp/>agentProperties;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">uint32_t<sp/>nMaterials;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>intrinsicProperties;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***<sp/>binaryProperties;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">vector&lt;int32_t&gt;<sp/>obstaclesMaterial;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">map&lt;uint32_t,<sp/>int32_t&gt;<sp/>shapesMaterial;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Paths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pathStatic;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Folder<sp/>where<sp/>the<sp/>static<sp/><sp/>data<sp/>should<sp/>be<sp/>saved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>pathDynamic;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Folder<sp/>where<sp/>the<sp/>dynamic<sp/>data<sp/>should<sp/>be<sp/>placed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>Utilities<sp/>functions</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">pair&lt;int,<sp/>double2&gt;<sp/>parse2DComponents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>result;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>ss(line);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(ss,<sp/>token,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>stod(token);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{EXIT_FAILURE,<sp/>{0.,<sp/>0.}};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(value);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(counter<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{EXIT_FAILURE,<sp/>{0.,<sp/>0.}};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{EXIT_SUCCESS,<sp/>{result[0],<sp/>result[1]}};</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">pair&lt;double,<sp/>double2&gt;<sp/>get_distance_to_wall_and_closest_point(double2<sp/>vertexA,<sp/>double2<sp/>vertexB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>C)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2<sp/>AB<sp/>=<sp/>vertexB<sp/>-<sp/>vertexA;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2<sp/>AC<sp/>=<sp/>C<sp/>-<sp/>vertexA;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>gamma:<sp/>coefficient<sp/>such<sp/>that<sp/>the<sp/>closest<sp/>point<sp/>P<sp/>on<sp/>(AB)<sp/>satisfies<sp/>AP=<sp/>gamma<sp/>AB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma<sp/>=<sp/>AB<sp/>%<sp/>AC<sp/>/<sp/>(AB<sp/>%<sp/>AB);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&lt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Closest<sp/>point<sp/>is<sp/>vertexA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_pair(!AC,<sp/>double2(vertexA));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gamma<sp/>&gt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Closest<sp/>point<sp/>is<sp/>vertexB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_pair(!(C<sp/>-<sp/>vertexB),<sp/>double2(vertexB));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Else:<sp/>closest<sp/>point<sp/>P<sp/>on<sp/>(AB)<sp/>to<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>double2<sp/>P<sp/>=<sp/>vertexA<sp/>+<sp/>gamma<sp/>*<sp/>AB;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_pair(!(C<sp/>-<sp/>P),<sp/>double2(P));</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_interval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmod(x<sp/>+<sp/>0.5<sp/>*<sp/>length,<sp/>length)<sp/>-<sp/>0.5<sp/>*<sp/>length;<sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_distance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>double2&amp;<sp/>B)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_mod<sp/>=<sp/>get_interval(A.first<sp/>-<sp/>B.first,<sp/>Lx);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_mod<sp/>=<sp/>get_interval(A.second<sp/>-<sp/>B.second,<sp/>Ly);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(pow(x_mod,<sp/>2)<sp/>+<sp/>pow(y_mod,<sp/>2));</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Volumes/desk_oscar/main/cours/phd_first_year/shape_project/Shape25may/src/mechanical_layer/src/Global.cpp"/>
  </compounddef>
</doxygen>
